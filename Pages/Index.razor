@page "/{GameId?}"
@inject NavigationManager Navigation

<CascadingValue Value="@PlayerColor">
    <CascadingValue Value="@GameState">
        <CascadingValue Value="@GameId">
            <CascadingValue Value="@hubConnection">
                <div class="rowContainer">
                    <Chess></Chess>
                    <div class="columnContainer">
                        <Chat Messages="@messages"></Chat>
                        <Timer></Timer>
                    </div>
                    
                </div>
            </CascadingValue>
        </CascadingValue>
    </CascadingValue>
</CascadingValue>

@if (UserState.username is null)
{
    <div class="Login">
        <div class="LoginCard">
            <h2 class="loginh2">Enter Your Name</h2>
            <input class="loginInput" @bind="usernameInput" @bind:event="oninput" @onkeydown="@Enter" />
            <button class="btn loginButton" @onclick="@SetUsername">Submit</button>
        </div>
    </div>
}


@code {
    [CascadingParameter]
    private UserStateProvider UserState { get; set; }
    [Parameter]
    public string? GameId { get; set; }
    private HubConnection? hubConnection;
    private List<Tuple<string, string>> messages = new List<Tuple<string, string>>();
    private string? usernameInput;
    private string? errorMessage;
    public ColorEnum? PlayerColor;
    public Game? GameState = new Game();
    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/ChessHub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (username, message) =>
        {
            messages.Add(Tuple.Create(username, message));
            InvokeAsync(StateHasChanged);
        });
        hubConnection.On<string>("ReceiveErrorMessage", (message) =>
        {
            errorMessage = message;
            InvokeAsync(StateHasChanged);
        });
        hubConnection.On<string,string>("ReceiveInitializeGame", (serverGameJson, messageString) =>
        {
            errorMessage = messageString;
            ServerGame serverGame = JsonHandler.ServerGameFromJson(serverGameJson);
            GameState = serverGame.game;
            PlayerColor = UserState.userId == serverGame.PlayerOneId ? serverGame.PlayerOneColor : serverGame.PlayerTwoColor;
            InvokeAsync(StateHasChanged);
        });
        hubConnection.On<string>("ReceiveUpdateGame", (gameJson) =>
        {
            GameState = JsonHandler.GameFromJson(gameJson);
            InvokeAsync(StateHasChanged);
        });
        hubConnection.On<string>("ReceiveAddSpectator", (serverGameJson) =>
        {
            errorMessage = "You are spectating";
            ServerGame serverGame = JsonHandler.ServerGameFromJson(serverGameJson);
            GameState = serverGame.game;
            PlayerColor = null;
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();

        if (GameId is not null)
        {
            await hubConnection.SendAsync("AddToGroup", GameId, UserState.userId);
        }

    }

    private async Task Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await SetUsername();
        }
    }

    private async Task SetUsername()
    {
        if (usernameInput != null)
        {
            UserState.username = usernameInput;
            await UserState.SaveChangesAsync();
        }
    }
}