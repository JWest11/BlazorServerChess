<div class="gridContainer">
	@for (int i=0; i<64; i++)
	{
		int num = i;
		int n = (i / 8) % 2 ^ (i % 2);
		if (selected == i)
		{
			if (possibleMoves.Contains(i))
			{
				<button @onclick="(e) => HandleClick(e, num)">
					<Square Available="true" Selected="true" SquareColor="(ColorEnum)(n)" Piece="@GameBoard[i]"></Square>
				</button>
			}
			else
			{
				<button @onclick="(e) => HandleClick(e, num)">
					<Square Available="false" Selected="true" SquareColor="(ColorEnum)(n)" Piece="@GameBoard[i]"></Square>
				</button>
			}
			
		}
		else
		{
			if (possibleMoves.Contains(i))
			{
				<button @onclick="(e) => HandleClick(e, num)">
					<Square Available="true" Selected="false" SquareColor="(ColorEnum)(n)" Piece="@GameBoard[i]"></Square>
				</button>
			}
			else
			{
				<button @onclick="(e) => HandleClick(e, num)">
					<Square Available="false" Selected="false" SquareColor="(ColorEnum)(n)" Piece="@GameBoard[i]"></Square>
				</button>
			}
			
		}
	}
    @if(GameState.CheckMate)
    {
        <div class="checkmate">Checkmate! @GameState.VictoryColor wins</div>
    }
    @if (GameState.TimeOut)
    {
        <div class="timeout">Time Out! @GameState.VictoryColor wins</div>
    }
</div>

@code {
    [CascadingParameter]
    public Game? GameState { get; set; }
    [CascadingParameter]
    public HubConnection? hubConnection { get; set; }
    [CascadingParameter]
    public string? GameId { get; set; }
    [CascadingParameter]
    public ColorEnum? PlayerColor { get; set; }
    [Parameter]
    public List<IPiece?> GameBoard { get; set; }

    public int? selected { get; set; }
    HashSet<int> possibleMoves = new HashSet<int>();

    protected override Task OnParametersSetAsync()
    {
        if (GameState.CheckMate || GameState.TimeOut)
        {
            selected = null;
        }
        return base.OnParametersSetAsync();
    }

    public async Task HandleClick(MouseEventArgs e, int i)
    {
        if (PlayerColor is null || GameState.CurrentTurnColor != PlayerColor || GameState.CheckMate || GameState.TimeOut)
        {
            Console.WriteLine("move not available");
            return;
        }
        if (selected == null)
        {
            if (GameBoard[i] == null || GameBoard[i].Color != GameState.CurrentTurnColor)
            {
                return;
            }
        }
        else
        {
            if (!possibleMoves.Contains(i))
            {
                selected = null;
                possibleMoves = new HashSet<int>();
                return;
            }
        }
        if (possibleMoves.Contains(i))
        {
            if (hubConnection is not null)
            {
                Move moveToSend = new Move()
                {
                    StartingTileId = (int)selected,
                    EndingTileId = i
                };
                await hubConnection.SendAsync("HandleMove", GameId, moveToSend);
            }
            selected = null;
            possibleMoves = new HashSet<int>();
        }
        else
        {
            selected = i;
            IPiece? piece = GameBoard[i];
            if (piece is not null)
            {
                possibleMoves = piece.GetSafeMoves();
            }
            else
            {
                possibleMoves = new HashSet<int>();
            }
        }

    }
    }
